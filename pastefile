using System;
using System.DirectoryServices.AccountManagement;
using System.Security.Cryptography;
using System.Text;

namespace YourNamespace
{
    public partial class Login : System.Web.UI.Page
    {
        // Key for AES encryption (must be 32 bytes for AES-256)
        private static readonly byte[] key = Encoding.UTF8.GetBytes("ThisIsASecretKeyForAES256Encryption!");

        protected void Page_Load(object sender, EventArgs e)
        {
        }

        protected void btnLogin_Click(object sender, EventArgs e)
        {
            string domain = "YourDomain"; // Replace with your domain name
            string username = txtUsername.Text;
            string password1 = txtPassword1.Text;
            string password2 = GenerateEncryptedPassword();

            // Combine and hash the passwords
            string combinedPassword = CombineAndHashPasswords(password1, password2);

            if (ValidateUser(domain, username, combinedPassword))
            {
                // Redirect to another page on successful login
                Response.Redirect("HomePage.aspx"); // Replace with your target page
            }
            else
            {
                // Show error message
                lblMessage.Text = "Invalid username or password.";
            }
        }

        private bool ValidateUser(string domain, string username, string password)
        {
            using (var context = new PrincipalContext(ContextType.Domain, domain))
            {
                return context.ValidateCredentials(username, password);
            }
        }

        private string GenerateEncryptedPassword()
        {
            string password2 = "SecretPassword"; // You can generate or fetch this dynamically

            using (Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.GenerateIV();
                byte[] iv = aes.IV;

                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, iv);

                using (var ms = new System.IO.MemoryStream())
                {
                    ms.Write(iv, 0, iv.Length); // prepend IV to the encrypted data
                    using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                    using (var sw = new System.IO.StreamWriter(cs))
                    {
                        sw.Write(password2);
                    }
                    return Convert.ToBase64String(ms.ToArray());
                }
            }
        }

        private string CombineAndHashPasswords(string password1, string password2)
        {
            // Combine the passwords
            string combinedPassword = password1 + password2;

            // Hash the combined password using SHA-256
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(combinedPassword));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2"));
                }
                return builder.ToString();
            }
        }
    }
}
