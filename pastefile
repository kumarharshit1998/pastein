LoginModel.cs
// Models/LoginModel.cs
using System.ComponentModel.DataAnnotations;

namespace YourNamespace.Models
{
    public class LoginModel
    {
        [Required]
        [Display(Name = "User ID")]
        public string UserId { get; set; }
        
        public string Message { get; set; }
    }
}




LoginController.cs

// Controllers/LoginController.cs
using Microsoft.AspNetCore.Mvc;
using YourNamespace.Models;
using Microsoft.Extensions.Configuration;
using System.DirectoryServices;
using System.Data.SqlClient;

namespace YourNamespace.Controllers
{
    public class LoginController : Controller
    {
        private readonly IConfiguration _configuration;

        public LoginController(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        [HttpGet]
        public IActionResult Index()
        {
            return View(new LoginModel());
        }

        [HttpPost]
        public IActionResult Index(LoginModel model)
        {
            if (ModelState.IsValid)
            {
                string userId = model.UserId;
                
                // Placeholder for checking Active Directory and SQL permissions
                if (CheckActiveDirectoryAccess(userId) && CheckDatabaseAccess(userId))
                {
                    // Create a session or authentication token here
                    TempData["Message"] = $"User ID {userId} has successfully logged in.";
                    return RedirectToAction("Home", "Dashboard");
                }
                else
                {
                    model.Message = "Access denied. Please contact support.";
                }
            }
            return View(model);
        }

        private bool CheckActiveDirectoryAccess(string userId)
        {
            // Simulate AD check logic or implement real AD access check here
            return true;
        }

        private bool CheckDatabaseAccess(string userId)
        {
            // Simulate database access check
            // Here, you can query your database or use a stored procedure similar to "usp_LMG_GetUserAccessRecord"

            string connectionString = _configuration.GetConnectionString("LMConnStr");
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("usp_LMG_GetUserAccessRecord", conn)
                {
                    CommandType = System.Data.CommandType.StoredProcedure
                };
                cmd.Parameters.AddWithValue("@QUID", userId);

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    return reader.HasRows;
                }
            }
        }
    }
}




Index.cshtml

<!-- Views/Login/Index.cshtml -->
@model YourNamespace.Models.LoginModel

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Loss Mitigation Login</title>
    <link href="~/css/Truiststyles.css" rel="stylesheet" />
</head>
<body>
    <form method="post" asp-action="Index">
        <div class="clsBorder">
            <h2>Loss Mitigation Login</h2>
            
            <div>
                <label asp-for="UserId">Enter User ID:</label>
                <input asp-for="UserId" class="form-control" />
                <span asp-validation-for="UserId" class="text-danger"></span>
            </div>
            
            <div>
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            
            @if (Model.Message != null)
            {
                <div class="alert alert-warning">@Model.Message</div>
            }
        </div>
    </form>
</body>
</html>
