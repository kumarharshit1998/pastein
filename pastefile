using LossMitigationMVC.Services;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace LossMitigationMVC.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClientSearchController : ControllerBase
    {
        private readonly CIFSoapClientService _cifService;

        public ClientSearchController(CIFSoapClientService cifService)
        {
            _cifService = cifService;
        }

        [HttpGet("search")]
        public async Task<IActionResult> SearchClient([FromQuery] string accountNumber)
        {
            var response = await _cifService.SearchClientAsync(accountNumber);
            return Ok(response);
        }
    }
}




<input type="text" id="accountNumber" placeholder="Enter Account Number" />
<button onclick="fetchClientData()">Search</button>

<div>
    <label>Client Name:</label>
    <input type="text" id="clientName" />
</div>
<div>
    <label>Address:</label>
    <input type="text" id="clientAddress" />
</div>

<script>
    async function fetchClientData() {
        const accountNumber = document.getElementById("accountNumber").value;
        const response = await fetch(`/api/ClientSearch/search?accountNumber=${accountNumber}`);
        const data = await response.json();

        if (data && data.Status && data.Status.ClientRecord.length > 0) {
            const client = data.Status.ClientRecord[0]; // Get first record
            document.getElementById("clientName").value = client.CIFShortName || "";
            document.getElementById("clientAddress").value = client.AddressDetail?.Address1 || "";
        } else {
            alert("No client found");
        }
    }
</script>



builder.Services.AddSingleton<CIFSoapClientService>();
